import { useState, useEffect, useCallback, ChangeEvent } from 'react';
import init, { analyze_dump_str } from '../../out/rw_diagnose_tools';
import { ScrollArea, ScrollBar } from './components/scroll-area';

type InputMode = 'upload' | 'paste';

function App() {
  const [wasmInitialized, setWasmInitialized] = useState(false);
  const [analysisResult, setAnalysisResult] = useState<string>('Select input method or upload a file.');
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);
  const [inputMode, setInputMode] = useState<InputMode>('upload');
  const [pastedText, setPastedText] = useState<string>('');
  const [copySuccess, setCopySuccess] = useState<string>('');
  const [wrapLines, setWrapLines] = useState<boolean>(false);

  // Initialize WASM module
  useEffect(() => {
    async function loadWasm() {
      try {
        console.log('Initializing WASM...');
        // Ensure the wasm file is loaded. The init() function generated by wasm-pack
        // usually handles fetching the .wasm file relative to the .js file.
        await init();
        setWasmInitialized(true);
        console.log('WASM initialized successfully.');
      } catch (err) {
        console.error("Error initializing WASM:", err);
        setError(`Failed to load analysis engine (WASM): ${err}`);
        setAnalysisResult('Error loading analysis engine.');
      }
    }
    loadWasm();
  }, []);

  // --- Analysis Logic ---
  const runAnalysis = (content: string) => {
    if (!wasmInitialized) {
      setError('WASM module not initialized yet.');
      setAnalysisResult('Analysis engine not ready. Please wait or refresh.');
      return;
    }
    if (!content || content.trim() === '') {
      setError('No content provided for analysis.');
      setAnalysisResult('Please provide content (upload file or paste text).');
      return;
    }

    console.log('Starting analysis...');
    setIsLoading(true);
    setError(null);
    setAnalysisResult('Analyzing...');

    // Use setTimeout to allow UI to update before potentially blocking analysis
    setTimeout(() => {
      try {
        console.log('Calling analyze_dump_str...');
        const result = analyze_dump_str(content);
        console.log('Analysis complete.');
        setAnalysisResult(result);
        setError(null);
      } catch (err) {
        console.error("Error during analysis:", err);
        setError(`Error during analysis: ${err}`);
        setAnalysisResult('Analysis failed.');
      } finally {
        setIsLoading(false);
        console.log('Analysis finished.');
      }
    }, 10); // Small delay
  };

  // --- Event Handlers ---
  const handleFileChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) {
      setAnalysisResult('No file selected.');
      setError(null);
      return;
    }

    const reader = new FileReader();
    reader.onload = (e) => {
      const fileContent = e.target?.result as string;
      if (typeof fileContent !== 'string') {
        setError("Failed to read file content as text.");
        setAnalysisResult('Error reading file.');
        return;
      }
      runAnalysis(fileContent);
    };
    reader.onerror = (e) => {
      console.error("Error reading file:", e);
      setError(`Error reading file: ${e.target?.error}`);
      setAnalysisResult('Error reading file.');
    };
    reader.readAsText(file);
  }, [wasmInitialized, runAnalysis]);

  const handleModeChange = (event: ChangeEvent<HTMLInputElement>) => {
    setInputMode(event.target.value as InputMode);
    // Clear results/errors when changing mode
    setAnalysisResult('Input mode changed. Paste text or upload file.');
    setError(null);
    setPastedText(''); // Clear pasted text
    // Reset file input if switching away from upload
    const fileInput = document.getElementById('dumpFile') as HTMLInputElement;
    if (fileInput) {
      fileInput.value = '';
    }
  };

  const handleTextChange = (event: ChangeEvent<HTMLTextAreaElement>) => {
    setPastedText(event.target.value);
  };

  const handlePasteAnalysis = () => {
    runAnalysis(pastedText);
  };

  // Copy to clipboard function
  const handleCopyResults = async () => {
    try {
      await navigator.clipboard.writeText(analysisResult);
      setCopySuccess('Copied!');
      // Clear the success message after 2 seconds
      setTimeout(() => setCopySuccess(''), 2000);
    } catch (err) {
      console.error('Failed to copy: ', err);
      setCopySuccess('Failed to copy');
      setTimeout(() => setCopySuccess(''), 2000);
    }
  };

  // Handle wrap lines toggle
  const handleWrapToggle = (event: ChangeEvent<HTMLInputElement>) => {
    setWrapLines(event.target.checked);
  };

  // --- Render --- //
  return (
    <div style={{ fontFamily: 'sans-serif', padding: '20px', lineHeight: '1.6' }}>
      <h1>RisingWave Await-Tree Analyzer</h1>
      <p>Analyze potential bottlenecks in your await-tree dump (JSON or TXT format).</p>

      {/* Input Mode Selection */}
      <div style={{ marginBottom: '20px' }}>
        <strong>Input Method:</strong>
        <label style={{ marginLeft: '10px', marginRight: '5px' }}>
          <input
            type="radio"
            value="upload"
            checked={inputMode === 'upload'}
            onChange={handleModeChange}
            disabled={isLoading}
          />
          Upload File
        </label>
        <label style={{ marginLeft: '10px', marginRight: '5px' }}>
          <input
            type="radio"
            value="paste"
            checked={inputMode === 'paste'}
            onChange={handleModeChange}
            disabled={isLoading}
          />
          Paste Text
        </label>
      </div>

      {/* Input Area */}
      <div style={{ marginBottom: '20px', padding: '15px', border: '1px solid #ccc', borderRadius: '4px', backgroundColor: '#fafafa' }}>
        {inputMode === 'upload' && (
          <div>
            <label htmlFor="dumpFile" style={{ display: 'block', marginBottom: '5px' }}>Select Dump File:</label>
            <input
              type="file"
              id="dumpFile"
              // accept=".json,.txt,text/plain" // Re-add if needed
              onChange={handleFileChange}
              disabled={!wasmInitialized || isLoading}
              style={{ marginBottom: '10px' }}
            />
          </div>
        )}

        {inputMode === 'paste' && (
          <div>
            <label htmlFor="pasteArea" style={{ display: 'block', marginBottom: '5px' }}>Paste Dump Content:</label>
            <textarea
              id="pasteArea"
              rows={15}
              value={pastedText}
              onChange={handleTextChange}
              disabled={!wasmInitialized || isLoading}
              placeholder="Paste your await-tree dump content here..."
              style={{ width: '95%', marginBottom: '10px', fontFamily: 'monospace' }}
            />
            <button
              onClick={handlePasteAnalysis}
              disabled={!wasmInitialized || isLoading || !pastedText.trim()}
            >
              Analyze Pasted Text
            </button>
          </div>
        )}
      </div>

      {/* Results Area */}
      <div style={{ width: '1200px', maxWidth: '100%' }}>
        <div style={{ display: 'flex', alignItems: 'center', marginBottom: '10px' }}>
          <h2 style={{ margin: 0, marginRight: '15px' }}>Analysis Results:</h2>
          <button
            onClick={handleCopyResults}
            disabled={!analysisResult || analysisResult === 'Select input method or upload a file.' || analysisResult === 'Analyzing...' || analysisResult === 'Analysis failed.' || analysisResult === 'Error loading analysis engine.' || analysisResult === 'Analysis engine not ready. Please wait or refresh.' || analysisResult === 'Please provide content (upload file or paste text).' || analysisResult === 'No file selected.' || analysisResult === 'Error reading file.' || analysisResult === 'Input mode changed. Paste text or upload file.'}
            style={{
              padding: '8px 16px',
              backgroundColor: '#007bff',
              color: 'white',
              border: 'none',
              borderRadius: '4px',
              cursor: 'pointer',
              fontSize: '14px',
              fontWeight: 'bold'
            }}
          >
            Copy Results
          </button>
          {copySuccess && (
            <span style={{ marginLeft: '10px', color: copySuccess === 'Copied!' ? 'green' : 'red', fontSize: '14px' }}>
              {copySuccess}
            </span>
          )}
          <label style={{ marginLeft: '20px', display: 'flex', alignItems: 'center', fontSize: '14px' }}>
            <input
              type="checkbox"
              checked={wrapLines}
              onChange={handleWrapToggle}
              style={{ marginRight: '5px' }}
            />
            Wrap Lines
          </label>
        </div>
        {error && <p style={{ color: 'red', fontWeight: 'bold' }}>Error: {error}</p>}
        <ScrollArea className="h-[400px] w-full rounded-md border p-4">
          <pre style={{ 
            margin: 0,
            whiteSpace: wrapLines ? 'pre-wrap' : 'pre', 
            fontFamily: 'monospace', 
            color: '#333',
            backgroundColor: 'transparent',
            minWidth: wrapLines ? 'auto' : 'max-content',
            overflow: 'auto'
          }}>
            {isLoading ? 'Analyzing...' : analysisResult}
          </pre>
          <ScrollBar orientation="horizontal" />
        </ScrollArea>
      </div>
    </div>
  );
}

export default App;
